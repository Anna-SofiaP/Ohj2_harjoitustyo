package unipaivakirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import unipaivakirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.04.20 14:19:13 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class MerkinnatTest {


  // Generated by ComTest BEGIN
  /** testLisaa46 */
  @Test
  public void testLisaa46() {    // Merkinnat: 46
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    assertEquals("From: Merkinnat line: 49", 0, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 50", 1, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm2); assertEquals("From: Merkinnat line: 51", 2, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 52", 3, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 53", pvm1, merkinnat.anna(0)); 
    assertEquals("From: Merkinnat line: 54", pvm2, merkinnat.anna(1)); 
    assertEquals("From: Merkinnat line: 55", pvm1, merkinnat.anna(2)); 
    assertEquals("From: Merkinnat line: 56", false, merkinnat.anna(1) == pvm1); 
    assertEquals("From: Merkinnat line: 57", true, merkinnat.anna(1) == pvm2); 
    try {
    assertEquals("From: Merkinnat line: 58", pvm1, merkinnat.anna(3)); 
    fail("Merkinnat: 58 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 59", 4, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 60", 5, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 61", 6, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKasvataTaulukkoa76 */
  @Test
  public void testKasvataTaulukkoa76() {    // Merkinnat: 76
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(), pvm3 = new Merkinta(); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 79", 1, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm2); assertEquals("From: Merkinnat line: 80", 2, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm3); assertEquals("From: Merkinnat line: 81", 3, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 82", 4, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm3); assertEquals("From: Merkinnat line: 83", 5, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta113 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta113() throws SailoException {    // Merkinnat: 113
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta merk1 = new Merkinta(), merk2 = new Merkinta(); 
    merk1.taytaM1Tiedoilla(); 
    merk2.taytaM2Tiedoilla(); 
    String hakemisto = "testiKayttajat"; 
    String tiedNimi = hakemisto+"/tmerkinnat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    merkinnat.lueTiedostosta(tiedNimi); 
    fail("Merkinnat: 128 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    merkinnat.lisaa(merk1); 
    merkinnat.lisaa(merk2); 
    merkinnat.talleta(); 
    merkinnat = new Merkinnat();  // Poistetaan vanhat luomalla uusi
    merkinnat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Merkinta> i = merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 135", merk1.toString(), i.next().toString()); 
    assertEquals("From: Merkinnat line: 136", merk2.toString(), i.next().toString()); 
    assertEquals("From: Merkinnat line: 137", false, i.hasNext()); 
    merkinnat.lisaa(merk1); 
    merkinnat.talleta(); 
    assertEquals("From: Merkinnat line: 140", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Merkinnat line: 142", true, fbak.delete()); 
    assertEquals("From: Merkinnat line: 143", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testMerkinnatIterator288 
   * @throws SailoException when error
   */
  @Test
  public void testMerkinnatIterator288() throws SailoException {    // Merkinnat: 288
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta merk1 = new Merkinta(), merk2 = new Merkinta(); 
    merk1.merkinnanLisays(); merk2.merkinnanLisays(); 
    merkinnat.lisaa(merk1); 
    merkinnat.lisaa(merk2); 
    merkinnat.lisaa(merk1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Merkinta merkinta:merkinnat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+merkinta.getMerkintaid()); 
    String tulos = " " + merk1.getMerkintaid() + " " + merk2.getMerkintaid() + " " + merk1.getMerkintaid(); 
    assertEquals("From: Merkinnat line: 307", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Merkinta>  i=merkinnat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Merkinta merkinta = i.next(); 
    ids.append(" "+merkinta.getMerkintaid()); 
    }
    assertEquals("From: Merkinnat line: 315", tulos, ids.toString()); 
    Iterator<Merkinta>  i=merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 318", true, i.next() == merk1); 
    assertEquals("From: Merkinnat line: 319", true, i.next() == merk2); 
    assertEquals("From: Merkinnat line: 320", true, i.next() == merk1); 
    try {
    i.next(); 
    fail("Merkinnat: 322 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}