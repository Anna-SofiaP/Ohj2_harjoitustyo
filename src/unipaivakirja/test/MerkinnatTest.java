package unipaivakirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import unipaivakirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.05.04 17:23:11 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class MerkinnatTest {



  // Generated by ComTest BEGIN
  /** testLisaa46 */
  @Test
  public void testLisaa46() {    // Merkinnat: 46
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(); 
    assertEquals("From: Merkinnat line: 49", 0, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 50", 1, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm2); assertEquals("From: Merkinnat line: 51", 2, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 52", 3, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 53", pvm1, merkinnat.anna(0)); 
    assertEquals("From: Merkinnat line: 54", pvm2, merkinnat.anna(1)); 
    assertEquals("From: Merkinnat line: 55", pvm1, merkinnat.anna(2)); 
    assertEquals("From: Merkinnat line: 56", false, merkinnat.anna(1) == pvm1); 
    assertEquals("From: Merkinnat line: 57", true, merkinnat.anna(1) == pvm2); 
    try {
    assertEquals("From: Merkinnat line: 58", pvm1, merkinnat.anna(3)); 
    fail("Merkinnat: 58 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 59", 4, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 60", 5, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 61", 6, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKasvataTaulukkoa90 */
  @Test
  public void testKasvataTaulukkoa90() {    // Merkinnat: 90
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(), pvm3 = new Merkinta(); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 93", 1, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm2); assertEquals("From: Merkinnat line: 94", 2, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm3); assertEquals("From: Merkinnat line: 95", 3, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm1); assertEquals("From: Merkinnat line: 96", 4, merkinnat.getLkm()); 
    merkinnat.lisaa(pvm3); assertEquals("From: Merkinnat line: 97", 5, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta127 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta127() throws SailoException {    // Merkinnat: 127
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta merk1 = new Merkinta(), merk2 = new Merkinta(); 
    merk1.taytaM1Tiedoilla(); 
    merk2.taytaM2Tiedoilla(); 
    String hakemisto = "testiKayttajat"; 
    String tiedNimi = hakemisto+"/tmerkinnat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    merkinnat.lueTiedostosta(tiedNimi); 
    fail("Merkinnat: 142 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    merkinnat.lisaa(merk1); 
    merkinnat.lisaa(merk2); 
    merkinnat.talleta(); 
    merkinnat = new Merkinnat();  // Poistetaan vanhat luomalla uusi
    merkinnat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Merkinta> i = merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 149", merk1.toString(), i.next().toString()); 
    assertEquals("From: Merkinnat line: 150", merk2.toString(), i.next().toString()); 
    assertEquals("From: Merkinnat line: 151", false, i.hasNext()); 
    merkinnat.lisaa(merk1); 
    merkinnat.talleta(); 
    assertEquals("From: Merkinnat line: 154", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Merkinnat line: 156", true, fbak.delete()); 
    assertEquals("From: Merkinnat line: 157", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testMerkinnatIterator302 
   * @throws SailoException when error
   */
  @Test
  public void testMerkinnatIterator302() throws SailoException {    // Merkinnat: 302
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta merk1 = new Merkinta(), merk2 = new Merkinta(); 
    merk1.merkinnanLisays(); merk2.merkinnanLisays(); 
    merkinnat.lisaa(merk1); 
    merkinnat.lisaa(merk2); 
    merkinnat.lisaa(merk1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Merkinta merkinta:merkinnat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+merkinta.getMerkintaid()); 
    String tulos = " " + merk1.getMerkintaid() + " " + merk2.getMerkintaid() + " " + merk1.getMerkintaid(); 
    assertEquals("From: Merkinnat line: 321", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Merkinta>  i=merkinnat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Merkinta merkinta = i.next(); 
    ids.append(" "+merkinta.getMerkintaid()); 
    }
    assertEquals("From: Merkinnat line: 329", tulos, ids.toString()); 
    Iterator<Merkinta>  i=merkinnat.iterator(); 
    assertEquals("From: Merkinnat line: 332", true, i.next() == merk1); 
    assertEquals("From: Merkinnat line: 333", true, i.next() == merk2); 
    assertEquals("From: Merkinnat line: 334", true, i.next() == merk1); 
    try {
    i.next(); 
    fail("Merkinnat: 336 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista411 
   * @throws SailoException when error
   */
  @Test
  public void testPoista411() throws SailoException {    // Merkinnat: 411
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(), pvm3 = new Merkinta(); 
    pvm1.merkinnanLisays(); pvm2.merkinnanLisays(); pvm3.merkinnanLisays(); 
    int id1 = pvm1.getMerkintaid(); 
    merkinnat.lisaa(pvm1); merkinnat.lisaa(pvm2); merkinnat.lisaa(pvm3); 
    assertEquals("From: Merkinnat line: 418", 1, merkinnat.poista(id1+1)); assertEquals("From: Merkinnat line: 418", 2, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 419", 1, merkinnat.poista(id1)); assertEquals("From: Merkinnat line: 419", 1, merkinnat.getLkm()); 
    assertEquals("From: Merkinnat line: 420", 0, merkinnat.poista(id1+3)); assertEquals("From: Merkinnat line: 420", 1, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId440 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId440() throws SailoException {    // Merkinnat: 440
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(), pvm2 = new Merkinta(), pvm3 = new Merkinta(); 
    pvm1.merkinnanLisays(); pvm2.merkinnanLisays(); pvm3.merkinnanLisays(); 
    int id1 = pvm1.getMerkintaid(); 
    merkinnat.lisaa(pvm1); merkinnat.lisaa(pvm2); merkinnat.lisaa(pvm3); 
    assertEquals("From: Merkinnat line: 447", 1, merkinnat.etsiId(id1+1)); 
    assertEquals("From: Merkinnat line: 448", 2, merkinnat.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaKayttajanMerkinnat462 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaKayttajanMerkinnat462() throws SailoException {    // Merkinnat: 462
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(1), pvm2 = new Merkinta(1), pvm3 = new Merkinta(1); 
    pvm1.merkinnanLisays(); pvm2.merkinnanLisays(); pvm3.merkinnanLisays(); 
    int id1 = -1; 
    merkinnat.lisaa(pvm1); merkinnat.lisaa(pvm2); merkinnat.lisaa(pvm3); 
    assertEquals("From: Merkinnat line: 469", 0, merkinnat.poistaKayttajanMerkinnat(id1)); 
    assertEquals("From: Merkinnat line: 470", 3, merkinnat.getLkm()); 
    id1 = pvm1.getKayttajaId(); 
    assertEquals("From: Merkinnat line: 472", 1, merkinnat.poistaKayttajanMerkinnat(id1)); 
    assertEquals("From: Merkinnat line: 473", 0, merkinnat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiKayttajaId507 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiKayttajaId507() throws SailoException {    // Merkinnat: 507
    Merkinnat merkinnat = new Merkinnat(); 
    Merkinta pvm1 = new Merkinta(1), pvm2 = new Merkinta(2), pvm3 = new Merkinta(2); 
    pvm1.merkinnanLisays(); pvm2.merkinnanLisays(); pvm3.merkinnanLisays(); 
    int id1 = pvm1.getKayttajaId(); 
    merkinnat.lisaa(pvm1); merkinnat.lisaa(pvm2); merkinnat.lisaa(pvm3); 
    assertEquals("From: Merkinnat line: 514", 0, merkinnat.etsiKayttajaId(id1)); 
    assertEquals("From: Merkinnat line: 515", 1, merkinnat.etsiKayttajaId(id1+1)); 
    assertEquals("From: Merkinnat line: 516", -1, merkinnat.etsiKayttajaId(id1+2)); 
    assertEquals("From: Merkinnat line: 517", -1, merkinnat.etsiKayttajaId(id1+5)); 
  } // Generated by ComTest END
}