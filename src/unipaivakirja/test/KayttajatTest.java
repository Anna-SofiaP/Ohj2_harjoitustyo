package unipaivakirja.test;
// Generated by ComTest BEGIN
import java.io.File;
import java.util.Iterator;
import unipaivakirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2022.04.20 14:02:24 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KayttajatTest {



  // Generated by ComTest BEGIN
  /** testLisaa44 */
  @Test
  public void testLisaa44() {    // Kayttajat: 44
    Kayttajat kayttajat = new Kayttajat(); 
    Kayttaja nea = new Kayttaja("Nea"), ansku = new Kayttaja("Ansku"); 
    assertEquals("From: Kayttajat line: 47", 0, kayttajat.getLkm()); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 48", 1, kayttajat.getLkm()); 
    kayttajat.lisaa(ansku); assertEquals("From: Kayttajat line: 49", 2, kayttajat.getLkm()); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 50", 3, kayttajat.getLkm()); 
    assertEquals("From: Kayttajat line: 51", nea, kayttajat.anna(0)); 
    assertEquals("From: Kayttajat line: 52", ansku, kayttajat.anna(1)); 
    assertEquals("From: Kayttajat line: 53", nea, kayttajat.anna(2)); 
    assertEquals("From: Kayttajat line: 54", false, kayttajat.anna(1) == nea); 
    assertEquals("From: Kayttajat line: 55", true, kayttajat.anna(1) == ansku); 
    try {
    assertEquals("From: Kayttajat line: 56", nea, kayttajat.anna(3)); 
    fail("Kayttajat: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 57", 4, kayttajat.getLkm()); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 58", 5, kayttajat.getLkm()); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 59", 6, kayttajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testKasvataTaulukkoa74 */
  @Test
  public void testKasvataTaulukkoa74() {    // Kayttajat: 74
    Kayttajat kayttajat = new Kayttajat(); 
    Kayttaja nea = new Kayttaja("Nea"), ansku = new Kayttaja("Ansku"), liisa = new Kayttaja("Liisa"); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 77", 1, kayttajat.getLkm()); 
    kayttajat.lisaa(ansku); assertEquals("From: Kayttajat line: 78", 2, kayttajat.getLkm()); 
    kayttajat.lisaa(liisa); assertEquals("From: Kayttajat line: 79", 3, kayttajat.getLkm()); 
    kayttajat.lisaa(nea); assertEquals("From: Kayttajat line: 80", 4, kayttajat.getLkm()); 
    kayttajat.lisaa(ansku); assertEquals("From: Kayttajat line: 81", 5, kayttajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta126 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta126() throws SailoException {    // Kayttajat: 126
    Kayttajat kayttajat = new Kayttajat(); 
    Kayttaja nea = new Kayttaja(), ansku = new Kayttaja(); 
    nea.taytaNeaTiedoilla(); 
    ansku.taytaAnskuTiedoilla(); 
    String hakemisto = "testiKayttajat"; 
    String tiedNimi = hakemisto+"/tkayttajat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    kayttajat.lueTiedostosta(tiedNimi); 
    fail("Kayttajat: 141 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    kayttajat.lisaa(nea); 
    kayttajat.lisaa(ansku); 
    kayttajat.talleta(); 
    kayttajat = new Kayttajat();  // Poistetaan vanhat luomalla uusi
    kayttajat.lueTiedostosta(tiedNimi);  // johon ladataan tiedot tiedostosta.
    Iterator<Kayttaja> i = kayttajat.iterator(); 
    assertEquals("From: Kayttajat line: 148", nea.toString(), i.next().toString()); 
    assertEquals("From: Kayttajat line: 149", ansku.toString(), i.next().toString()); 
    assertEquals("From: Kayttajat line: 150", false, i.hasNext()); 
    kayttajat.lisaa(nea); 
    kayttajat.talleta(); 
    assertEquals("From: Kayttajat line: 153", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Kayttajat line: 155", true, fbak.delete()); 
    assertEquals("From: Kayttajat line: 156", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKayttajatIterator323 
   * @throws SailoException when error
   */
  @Test
  public void testKayttajatIterator323() throws SailoException {    // Kayttajat: 323
    Kayttajat kayttajat = new Kayttajat(); 
    Kayttaja nea = new Kayttaja(), ansku = new Kayttaja(); 
    nea.rekisteroi(); ansku.rekisteroi(); 
    kayttajat.lisaa(nea); 
    kayttajat.lisaa(ansku); 
    kayttajat.lisaa(nea); 
    StringBuffer ids = new StringBuffer(30); 
    for (Kayttaja kayttaja:kayttajat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+kayttaja.getKayttajaId()); 
    String tulos = " " + nea.getKayttajaId() + " " + ansku.getKayttajaId() + " " + nea.getKayttajaId(); 
    assertEquals("From: Kayttajat line: 342", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Kayttaja>  i=kayttajat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Kayttaja kayttaja = i.next(); 
    ids.append(" "+kayttaja.getKayttajaId()); 
    }
    assertEquals("From: Kayttajat line: 350", tulos, ids.toString()); 
    Iterator<Kayttaja>  i=kayttajat.iterator(); 
    assertEquals("From: Kayttajat line: 353", true, i.next() == nea); 
    assertEquals("From: Kayttajat line: 354", true, i.next() == ansku); 
    assertEquals("From: Kayttajat line: 355", true, i.next() == nea); 
    try {
    i.next(); 
    fail("Kayttajat: 357 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}